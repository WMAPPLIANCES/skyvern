from logging.config import fileConfig
import os # Adicionado para acessar variáveis de ambiente
from sqlalchemy import engine_from_config, pool, create_engine # Adicionado create_engine
from alembic import context

# Importar seus modelos SQLAlchemy para que o Alembic os reconheça para autogenerate
# Ajuste o caminho de importação conforme a estrutura do seu projeto Skyvern
# Exemplo: from skyvern.forge.sdk.db.models import Base (ou os modelos específicos)
# Se você não tem um Base declarativo central, precisará importar todos os seus modelos.
# Por enquanto, vamos comentar, mas isso é crucial para 'alembic revision --autogenerate'
# from my_project.models import Base # SUBSTITUA PELO CAMINHO CORRETO PARA SEUS MODELOS/BASE

# este é o objeto MetaData do Alembic para suporte a
# autogenerate.
# target_metadata = Base.metadata # DESCOMENTE E AJUSTE QUANDO TIVER O IMPORT DE MODELOS
target_metadata = None # Mantenha como None se não for usar autogenerate ou se os modelos não forem facilmente importáveis aqui

# outras opções do objeto context podem ser configuradas aqui, por exemplo:
# context.set_ ẩm_option(option_name, option_value)

config = context.config

# Interpretar o arquivo de configuração para logging do Python.
# Esta linha assume que o arquivo de configuração de logging já está configurado.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# --- INÍCIO DA MODIFICAÇÃO PRINCIPAL ---
def get_db_url():
    """
    Obtém a URL do banco de dados da variável de ambiente DATABASE_STRING
    e a ajusta para uso síncrono pelo Alembic.
    """
    # Tenta obter de settings.DATABASE_STRING primeiro (se você tiver um objeto settings)
    # from skyvern.config import settings # Mova este import para o topo do arquivo se usar
    # db_url = settings.DATABASE_STRING

    # Alternativamente, e mais comum para alembic.ini/env.py, ler diretamente da variável de ambiente
    db_url = os.environ.get("DATABASE_STRING")

    if not db_url:
        # Se DATABASE_STRING não estiver definida, tente pegar de sqlalchemy.url no alembic.ini
        # Isso fornece um fallback, mas prioriza a variável de ambiente.
        db_url = config.get_main_option("sqlalchemy.url")
        if not db_url:
            raise ValueError(
                "DATABASE_STRING environment variable not set and sqlalchemy.url not found in alembic.ini"
            )
        print(f"ALEMBIC: Usando sqlalchemy.url de alembic.ini: {db_url}")
    else:
        print(f"ALEMBIC: Usando DATABASE_STRING da variável de ambiente: {db_url}")

    # Garante que estamos usando um dialeto síncrono para o Alembic
    if db_url.startswith("postgresql+psycopg_async://"):
        db_url = db_url.replace("postgresql+psycopg_async://", "postgresql+psycopg://", 1)
        print(f"ALEMBIC: Convertido para URL síncrona: {db_url}")
    elif db_url.startswith("postgresql+asyncpg://"):
        db_url = db_url.replace("postgresql+asyncpg://", "postgresql://", 1) # psycopg síncrono usa postgresql:// ou postgresql+psycopg://
        print(f"ALEMBIC: Convertido para URL síncrona (de asyncpg): {db_url}")
    
    # Se já for postgresql:// ou postgresql+psycopg://, está bom.
    # Adicionar verificação para garantir que é um dialeto postgresql
    if not (db_url.startswith("postgresql+psycopg://") or db_url.startswith("postgresql://")):
        # Se for um formato inesperado, pode ser necessário ajustar.
        # Por exemplo, se for apenas 'postgres://', o psycopg pode lidar com isso.
        # O importante é que não seja um dialeto explicitamente assíncrono como asyncpg ou psycopg_async.
        print(f"ALEMBIC WARNING: URL do DB '{db_url}' não parece ser um dialeto psycopg síncrono padrão. Verifique se está correto.")

    return db_url

# Substituir a configuração da URL no objeto config do Alembic
# para que engine_from_config também use a URL correta se for chamado.
# No entanto, vamos criar a engine explicitamente abaixo para run_migrations_online.
config.set_main_option("sqlalchemy.url", get_db_url())
# --- FIM DA MODIFICAÇÃO PRINCIPAL ---


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url") # Agora pega a URL modificada
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    # Usar a URL já processada e definida em config.get_main_option
    # ou criar a engine diretamente com a URL processada.
    db_url_for_alembic = config.get_main_option("sqlalchemy.url")
    
    # Criar uma engine SÍNCRONA para o Alembic
    connectable = create_engine(db_url_for_alembic)

    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
